import UIKit

class GameViewController: UIViewController {
    // MARK: - Properties
    private var fingerViews: [UITouch: UIView] = [:]
    private let maxFingers = 5
    private var countdownTimer: Timer?
    private var remainingTime = 3
    private var selectedTruthOrDareModes: Set<TruthOrDareMode> = []
    
    // –ù–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
    private var currentQuestionIndex = 0
    private var questions: [String] = []
    private var currentQuestionType: TruthOrDareMode = .truth
    private var isQuestionVisible = true
    
    // Constraint –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
    private var questionContentTopConstraint: NSLayoutConstraint!
    
    // –ù–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    private var isCountdownActive = false
    private var pulseAnimationTimer: Timer?
    
    // MARK: - üéØ –ù–û–í–´–ï –°–í–û–ô–°–¢–í–ê –î–õ–Ø –°–ò–°–¢–ï–ú–´ –û–¶–ï–ù–ö–ò
    private var hasShownRatingPopup = false // –ß—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ —Å–µ—Å—Å–∏—é
    private var totalQuestionsCount: Int {
        return questions.count
    }
    
    private var progressPercentage: Float {
        guard totalQuestionsCount > 0 else { return 0 }
        return Float(currentQuestionIndex + 1) / Float(totalQuestionsCount)
    }
    
    // MARK: - UI Components
    private lazy var backgroundView: UIView = {
        let view = UIView()
        view.backgroundColor = UIColor(hex: "84C500")
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    private lazy var touchAreaView: UIView = {
        let view = UIView()
        view.backgroundColor = .clear
        view.translatesAutoresizingMaskIntoConstraints = false
        view.isMultipleTouchEnabled = true
        return view
    }()
    
    // –°—Ç–∞—Ç–∏—á–Ω–∞—è –±–µ–ª–∞—è —à–∞–ø–∫–∞
    private lazy var headerView: UIView = {
        let view = UIView()
        view.backgroundColor = .white
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    private lazy var backButton: UIButton = {
        let button = UIButton(type: .system)
        button.setImage(UIImage(systemName: "chevron.left"), for: .normal)
        button.setTitle(" –í—ã–π—Ç–∏", for: .normal)
        button.setTitleColor(.black, for: .normal)
        button.tintColor = .black
        button.backgroundColor = .clear
        button.addTarget(self, action: #selector(dismissViewController), for: .touchUpInside)
        button.translatesAutoresizingMaskIntoConstraints = false
        return button
    }()
    
    private lazy var questionTypeLabel: UILabel = {
        let label = UILabel()
        label.font = UIFont.systemFont(ofSize: 14, weight: .semibold)
        label.textColor = .white
        label.textAlignment = .center
        label.layer.cornerRadius = 12
        label.clipsToBounds = true
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private lazy var questionCounterLabel: UILabel = {
        let label = UILabel()
        label.font = UIFont.systemFont(ofSize: 14, weight: .regular)
        label.textColor = .black
        label.textAlignment = .right
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ (–∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–∫—Ä—ã–≤–∞—Ç—å—Å—è)
    private lazy var questionContentView: UIView = {
        let view = UIView()
        view.backgroundColor = .white
        view.layer.cornerRadius = 16
        view.layer.maskedCorners = [.layerMinXMaxYCorner, .layerMaxXMaxYCorner]
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    private lazy var questionLabel: UILabel = {
        let label = UILabel()
        label.font = UIFont.systemFont(ofSize: 16, weight: .regular)
        label.textColor = .black
        label.numberOfLines = 0
        label.textAlignment = .center
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private lazy var progressBar: UIView = {
        let view = UIView()
        view.backgroundColor = UIColor.lightGray.withAlphaComponent(0.3)
        view.layer.cornerRadius = 2
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    private lazy var progressFill: UIView = {
        let view = UIView()
        view.backgroundColor = .lightGray
        view.layer.cornerRadius = 2
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    private lazy var navigationButtons: UIStackView = {
        let stackView = UIStackView()
        stackView.axis = .horizontal
        stackView.spacing = 0
        stackView.distribution = .fillEqually
        stackView.translatesAutoresizingMaskIntoConstraints = false
        return stackView
    }()
    
    private lazy var previousButton: UIButton = {
        let button = UIButton(type: .system)
        let config = UIImage.SymbolConfiguration(pointSize: 24, weight: .medium)
        button.setImage(UIImage(systemName: "arrow.left", withConfiguration: config), for: .normal)
        button.tintColor = .gray
        button.addTarget(self, action: #selector(previousQuestion), for: .touchUpInside)
        return button
    }()
    
    private lazy var nextButton: UIButton = {
        let button = UIButton(type: .system)
        let config = UIImage.SymbolConfiguration(pointSize: 24, weight: .medium)
        button.setImage(UIImage(systemName: "arrow.right", withConfiguration: config), for: .normal)
        button.tintColor = .gray
        button.addTarget(self, action: #selector(nextQuestion), for: .touchUpInside)
        return button
    }()
    
    // –ü–æ–ª–æ—Å–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–≤–∞–π–ø–∞
    private lazy var pullIndicator: UIView = {
        let view = UIView()
        view.backgroundColor = UIColor.black.withAlphaComponent(0.3)
        view.layer.cornerRadius = 2
        view.translatesAutoresizingMaskIntoConstraints = false
        view.alpha = 1.0 // –í—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞
        return view
    }()
    
    // MARK: - Lifecycle Methods
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        updateUIForSelectedModes()
        setupSwipeGestures()
        
        // –í–∫–ª—é—á–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–∞—Å–∞–Ω–∏—è –¥–ª—è –≤—Å–µ–≥–æ view
        view.isMultipleTouchEnabled = true
        touchAreaView.isMultipleTouchEnabled = true
    }
    
    // MARK: - Setup Methods
    private func setupUI() {
        view.addSubview(backgroundView)
        view.addSubview(touchAreaView)
        view.addSubview(questionContentView)
        view.addSubview(headerView)
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã –≤ —Å—Ç–∞—Ç–∏—á–Ω–æ–π —à–∞–ø–∫–µ
        headerView.addSubview(backButton)
        headerView.addSubview(questionTypeLabel)
        headerView.addSubview(questionCounterLabel)
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ –≤–æ–ø—Ä–æ—Å–∞
        questionContentView.addSubview(questionLabel)
        questionContentView.addSubview(progressBar)
        progressBar.addSubview(progressFill)
        questionContentView.addSubview(pullIndicator)
        questionContentView.addSubview(navigationButtons)
        
        navigationButtons.addArrangedSubview(previousButton)
        navigationButtons.addArrangedSubview(nextButton)
        
        questionContentTopConstraint = questionContentView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 40)
        
        NSLayoutConstraint.activate([
            backgroundView.topAnchor.constraint(equalTo: view.topAnchor),
            backgroundView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            backgroundView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            backgroundView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            
            touchAreaView.topAnchor.constraint(equalTo: view.topAnchor),
            touchAreaView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            touchAreaView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            touchAreaView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            
            headerView.topAnchor.constraint(equalTo: view.topAnchor),
            headerView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            headerView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            headerView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 60),
            
            backButton.bottomAnchor.constraint(equalTo: headerView.bottomAnchor, constant: -18),
            backButton.leadingAnchor.constraint(equalTo: headerView.leadingAnchor, constant: 16),
            
            questionTypeLabel.bottomAnchor.constraint(equalTo: headerView.bottomAnchor, constant: -18),
            questionTypeLabel.centerXAnchor.constraint(equalTo: headerView.centerXAnchor),
            questionTypeLabel.widthAnchor.constraint(equalToConstant: 80),
            questionTypeLabel.heightAnchor.constraint(equalToConstant: 24),
            
            questionCounterLabel.bottomAnchor.constraint(equalTo: headerView.bottomAnchor, constant: -18),
            questionCounterLabel.trailingAnchor.constraint(equalTo: headerView.trailingAnchor, constant: -16),
            
            questionContentTopConstraint,
            questionContentView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            questionContentView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            questionContentView.heightAnchor.constraint(equalToConstant: 200),
            
            questionLabel.topAnchor.constraint(equalTo: questionContentView.topAnchor, constant: 30),
            questionLabel.leadingAnchor.constraint(equalTo: questionContentView.leadingAnchor, constant: 16),
            questionLabel.trailingAnchor.constraint(equalTo: questionContentView.trailingAnchor, constant: -16),
            
            progressBar.leadingAnchor.constraint(equalTo: questionContentView.leadingAnchor, constant: 16),
            progressBar.trailingAnchor.constraint(equalTo: questionContentView.trailingAnchor, constant: -16),
            progressBar.bottomAnchor.constraint(equalTo: navigationButtons.topAnchor, constant: -16),
            progressBar.heightAnchor.constraint(equalToConstant: 4),
            
            progressFill.topAnchor.constraint(equalTo: progressBar.topAnchor),
            progressFill.leadingAnchor.constraint(equalTo: progressBar.leadingAnchor),
            progressFill.bottomAnchor.constraint(equalTo: progressBar.bottomAnchor),
            progressFill.widthAnchor.constraint(equalTo: progressBar.widthAnchor, multiplier: 0.1),
            
            navigationButtons.leadingAnchor.constraint(equalTo: questionContentView.leadingAnchor),
            navigationButtons.trailingAnchor.constraint(equalTo: questionContentView.trailingAnchor),
            navigationButtons.bottomAnchor.constraint(equalTo: questionContentView.bottomAnchor),
            navigationButtons.heightAnchor.constraint(equalToConstant: 50),
            
            pullIndicator.centerXAnchor.constraint(equalTo: navigationButtons.centerXAnchor),
            pullIndicator.centerYAnchor.constraint(equalTo: navigationButtons.centerYAnchor),
            pullIndicator.widthAnchor.constraint(equalToConstant: 40),
            pullIndicator.heightAnchor.constraint(equalToConstant: 4)
        ])
    }
    
    private func setupSwipeGestures() {
        let swipeUp = UISwipeGestureRecognizer(target: self, action: #selector(hideQuestion))
        swipeUp.direction = .up
        questionContentView.addGestureRecognizer(swipeUp)
        
        let swipeDownOnPrevious = UISwipeGestureRecognizer(target: self, action: #selector(showQuestion))
        swipeDownOnPrevious.direction = .down
        previousButton.addGestureRecognizer(swipeDownOnPrevious)
        
        let swipeDownOnNext = UISwipeGestureRecognizer(target: self, action: #selector(showQuestion))
        swipeDownOnNext.direction = .down
        nextButton.addGestureRecognizer(swipeDownOnNext)
        
        let tapToShow = UITapGestureRecognizer(target: self, action: #selector(showQuestion))
        pullIndicator.addGestureRecognizer(tapToShow)
        pullIndicator.isUserInteractionEnabled = true
        
        let swipeDownOnButtons = UISwipeGestureRecognizer(target: self, action: #selector(showQuestion))
        swipeDownOnButtons.direction = .down
        navigationButtons.addGestureRecognizer(swipeDownOnButtons)
    }
    
    // MARK: - Game Mode Setup
    func setTruthOrDareModes(_ modes: Set<TruthOrDareMode>) {
        selectedTruthOrDareModes = modes
        generateQuestions()
        
        if isViewLoaded {
            updateUIForSelectedModes()
        }
    }
    
    private func generateQuestions() {
        questions = []
        
        if selectedTruthOrDareModes.contains(.truth) {
            questions += [
                "–°–∞–º—ã–π –≤–æ—Å–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å–∞–º–æ–≥–æ —á–µ—Å—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—Å–µ –±—É–¥—É—Ç –≤ —à–æ–∫–µ —Ä–µ–∞–ª—å–Ω–æ (–Ω–æ –Ω–µ —Ñ–∞–∫—Ç)?",
                "–û —á–µ–º —Ç—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ä–∞—Å—Å–∫–∞–∂–µ—à—å —Ä–æ–¥–∏—Ç–µ–ª—è–º?",
                "–°–∞–º–∞—è —Å—Ç—Ä–∞–Ω–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞, –∫–æ—Ç–æ—Ä–∞—è —É —Ç–µ–±—è –µ—Å—Ç—å?",
                "–ó–∞ –∫–µ–º –∏–∑ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—ã –±—ã –ø–æ—à–µ–ª –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ?",
                "–°–∞–º–∞—è –±–æ–ª—å—à–∞—è –ª–æ–∂—å, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –≥–æ–≤–æ—Ä–∏–ª?",
                "–ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç –≤ –ª—é–¥—è—Ö?",
                "–°–∞–º—ã–π —Å—Ç—ã–¥–Ω—ã–π –ø–æ—Å—Ç—É–ø–æ–∫ –≤ –¥–µ—Ç—Å—Ç–≤–µ?",
                "–û —á–µ–º —Ç—ã –º–µ—á—Ç–∞–µ—à—å, –Ω–æ –±–æ–∏—à—å—Å—è –ø—Ä–∏–∑–Ω–∞—Ç—å—Å—è?",
                "–ö–æ–≥–æ –∏–∑ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–µ–π —Ç—ã —Å—á–∏—Ç–∞–µ—à—å –ø–µ—Ä–µ–æ—Ü–µ–Ω–µ–Ω–Ω—ã–º?",
                "–°–∞–º–æ–µ –≥–ª—É–ø–æ–µ, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–ª —Ä–∞–¥–∏ –ª—é–±–≤–∏?"
            ]
        }
        
        if selectedTruthOrDareModes.contains(.dare) {
            questions += [
                "–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç, —Å—Ç–æ—è –Ω–∞ –æ–¥–Ω–æ–π –Ω–æ–≥–µ",
                "–ü–æ–∑–≤–æ–Ω–∏ —Å–ª—É—á–∞–π–Ω–æ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É –∏ —Å–∫–∞–∂–∏ '–Ø —Ç–µ–±—è –ª—é–±–ª—é'",
                "–°—ä–µ—à—å —á—Ç–æ-—Ç–æ –æ—Å—Ç—Ä–æ–µ –±–µ–∑ –≤–æ–¥—ã",
                "–°—Ç–∞–Ω—Ü—É–π 30 —Å–µ–∫—É–Ω–¥ –±–µ–∑ –º—É–∑—ã–∫–∏",
                "–ò–∑–æ–±—Ä–∞–∑–∏ –ª—é–±–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã",
                "–°–ø–æ–π –ø–µ—Å–Ω—é –≥–æ–ª–æ—Å–æ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ –ø–æ–ª–∞",
                "–°–¥–µ–ª–∞–π —Å–µ–ª—Ñ–∏ –≤ —Å–º–µ—à–Ω–æ–π –ø–æ–∑–µ –∏ –æ—Ç–ø—Ä–∞–≤—å —Ä–æ–¥–∏—Ç–µ–ª—è–º",
                "–ü–æ–ø—ã—Ç–∞–π—Å—è –ª–∏–∑–Ω—É—Ç—å —Å–≤–æ–π –ª–æ–∫–æ—Ç—å",
                "–ì–æ–≤–æ—Ä–∏ —Ç–æ–ª—å–∫–æ —à–µ–ø–æ—Ç–æ–º —Å–ª–µ–¥—É—é—â–∏–µ 3 –≤–æ–ø—Ä–æ—Å–∞",
                "–°–¥–µ–ª–∞–π –ø–ª–∞–Ω–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥"
            ]
        }
        
        questions.shuffle()
        if !questions.isEmpty {
            updateCurrentQuestionType()
        }
    }
    
    private func updateCurrentQuestionType() {
        guard currentQuestionIndex < questions.count else { return }
        
        let currentQuestion = questions[currentQuestionIndex]
        
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
        let truthKeywords = ["—Å–∞–º—ã–π", "—Å–∞–º–∞—è", "–∫–æ–≥–æ", "—á—Ç–æ", "–∫–∞–∫", "–ø–æ—á–µ–º—É", "–∫–æ–≥–¥–∞", "–≥–¥–µ", "–∫–∞–∫–æ–π"]
        let isLikelyTruth = truthKeywords.contains { currentQuestion.lowercased().contains($0) }
        
        if selectedTruthOrDareModes.contains(.truth) && selectedTruthOrDareModes.contains(.dare) {
            currentQuestionType = isLikelyTruth ? .truth : .dare
        } else if selectedTruthOrDareModes.contains(.truth) {
            currentQuestionType = .truth
        } else {
            currentQuestionType = .dare
        }
        
        updateBackgroundColor()
    }
    
    private func updateUIForSelectedModes() {
        updateBackgroundColor()
        updateQuestionCard()
    }
    
    private func updateBackgroundColor() {
        let targetColor: UIColor
        
        switch currentQuestionType {
        case .truth:
            targetColor = UIColor(hex: "84C500") // –ó–µ–ª–µ–Ω—ã–π
        case .dare:
            targetColor = UIColor(hex: "5800CF") // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        }
        
        UIView.animate(withDuration: 0.3) {
            self.backgroundView.backgroundColor = targetColor
        }
    }
    
    private var progressWidthConstraint: NSLayoutConstraint?
    
    private func updateQuestionCard() {
        guard !questions.isEmpty else { return }
        
        let currentQuestion = questions[currentQuestionIndex]
        questionLabel.text = currentQuestion
        questionCounterLabel.text = "\(currentQuestionIndex + 1)/\(questions.count)"
        
        questionTypeLabel.text = currentQuestionType.rawValue
        switch currentQuestionType {
        case .truth:
            questionTypeLabel.backgroundColor = UIColor(hex: "84C500")
        case .dare:
            questionTypeLabel.backgroundColor = UIColor(hex: "5800CF")
        }
        
        let progress = CGFloat(currentQuestionIndex + 1) / CGFloat(questions.count)
        progressWidthConstraint?.isActive = false
        progressWidthConstraint = progressFill.widthAnchor.constraint(equalTo: progressBar.widthAnchor, multiplier: progress)
        progressWidthConstraint?.isActive = true
        
        UIView.animate(withDuration: 0.3) {
            self.view.layoutIfNeeded()
        }
        
        previousButton.alpha = currentQuestionIndex > 0 ? 1.0 : 0.3
        nextButton.alpha = currentQuestionIndex < questions.count - 1 ? 1.0 : 0.3
    }
    
    // MARK: - Actions
    @objc private func hideQuestion() {
        guard isQuestionVisible else { return }
        
        isQuestionVisible = false
        
        questionContentTopConstraint.constant = -100
        
        UIView.animate(withDuration: 0.4, delay: 0, usingSpringWithDamping: 0.8, initialSpringVelocity: 0.5, options: [], animations: {
            self.view.layoutIfNeeded()
        })
    }
    
    @objc private func showQuestion() {
        guard !isQuestionVisible else { return }
        
        isQuestionVisible = true
        
        questionContentTopConstraint.constant = 40
        
        UIView.animate(withDuration: 0.4, delay: 0, usingSpringWithDamping: 0.8, initialSpringVelocity: 0.5, options: [], animations: {
            self.view.layoutIfNeeded()
        })
    }
    
    @objc private func previousQuestion() {
        guard currentQuestionIndex > 0 else { return }
        
        currentQuestionIndex -= 1
        updateCurrentQuestionType()
        updateQuestionCard()
        
        if !isQuestionVisible {
            showQuestion()
        }
    }
    
    @objc private func nextQuestion() {
        guard currentQuestionIndex < questions.count - 1 else { return }
        
        currentQuestionIndex += 1
        updateCurrentQuestionType()
        updateQuestionCard()
        
        if !isQuestionVisible {
            showQuestion()
        }
    }
    
    @objc private func dismissViewController() {
        // üéØ –ü–†–û–í–ï–†–Ø–ï–ú –ü–†–û–ì–†–ï–°–° –ü–ï–†–ï–î –í–´–•–û–î–û–ú
        checkProgressAndShowRatingIfNeeded { [weak self] in
            self?.dismiss(animated: true, completion: nil)
        }
    }
    
    // MARK: - üéØ –°–ò–°–¢–ï–ú–ê –û–¶–ï–ù–ö–ò –ü–û–î–ë–û–†–ö–ò
    
    private func checkProgressAndShowRatingIfNeeded(completion: @escaping () -> Void) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º: –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 25% –∏–ª–∏ –±–æ–ª—å—à–µ –ò –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ª–∏ —É–∂–µ popup
        if progressPercentage >= 0.25 && !hasShownRatingPopup {
            showRatingPopup(completion: completion)
        } else {
            completion()
        }
    }
    
    private func showRatingPopup(completion: @escaping () -> Void) {
        hasShownRatingPopup = true
        
        let ratingPopup = RatingPopupViewController()
        ratingPopup.delegate = self
        ratingPopup.modalPresentationStyle = .overFullScreen
        ratingPopup.modalTransitionStyle = .crossDissolve
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º completion –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ delegate –º–µ—Ç–æ–¥–∞—Ö
        objc_setAssociatedObject(ratingPopup, "completion", completion, .OBJC_ASSOCIATION_COPY_NONATOMIC)
        
        present(ratingPopup, animated: false)
    }
    
    // MARK: - üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ö–ê–°–ê–ù–ò–ô
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        print("Touches began: \(touches.count)")
        
        for touch in touches {
            let location = touch.location(in: touchAreaView)
            
            // –ò—Å–∫–ª—é—á–∞–µ–º –∫–∞—Å–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ —à–∞–ø–∫–∏ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
            if headerView.frame.contains(touch.location(in: view)) ||
               questionContentView.frame.contains(touch.location(in: view)) {
                continue
            }
            
            if fingerViews[touch] != nil {
                continue
            }
            
            if fingerViews.count >= maxFingers {
                continue
            }
            
            let fingerView = createFingerView()
            fingerView.center = location
            touchAreaView.addSubview(fingerView)
            fingerViews[touch] = fingerView
            
            fingerView.transform = CGAffineTransform(scaleX: 0.1, y: 0.1)
            UIView.animate(withDuration: 0.3) {
                fingerView.transform = .identity
            }
            
            // üéØ –õ–ï–ì–ö–ê–Ø –í–ò–ë–†–ê–¶–ò–Ø –ü–†–ò –î–û–ë–ê–í–õ–ï–ù–ò–ò –ù–û–í–û–ì–û –ü–ê–õ–¨–¶–ê
            let impactFeedback = UIImpactFeedbackGenerator(style: .light)
            impactFeedback.impactOccurred()
        }
        
        updateFingerCount()
    }
    
    override func touchesMoved(_ touches: Set<UITouch>, with event: UIEvent?) {
        for touch in touches {
            if let fingerView = fingerViews[touch] {
                let location = touch.location(in: touchAreaView)
                fingerView.center = location
            }
        }
    }
    
    override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {
        for touch in touches {
            if let fingerView = fingerViews[touch] {
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É–ª—å—Å–∞—Ü–∏—é –µ—Å–ª–∏ –ø–∞–ª–µ—Ü —É–±—Ä–∞–Ω
                stopPulseAnimation(for: fingerView)
                
                // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞–ª–µ—Ü –≤—ã–±—Ä–∞–Ω–Ω—ã–º
                let isSelectedFinger = fingerView.transform.a > 1.2 // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–≤–µ–ª–∏—á–µ–Ω –ª–∏ –ø–∞–ª–µ—Ü
                
                if isSelectedFinger {
                    // üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –í–°–ï –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–Ω–∞—á–∞–ª–∞
                    fingerView.layer.removeAllAnimations()
                    
                    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫ –æ–±—ã—á–Ω–æ–º—É –≤–∏–¥—É –ë–ï–ó –∞–Ω–∏–º–∞—Ü–∏–∏
                    fingerView.transform = .identity
                    fingerView.backgroundColor = .white
                    fingerView.layer.borderWidth = 3
                    fingerView.layer.borderColor = UIColor.black.withAlphaComponent(0.2).cgColor
                    fingerView.layer.shadowOffset = CGSize(width: 0, height: 4)
                    fingerView.layer.shadowRadius = 8
                    fingerView.layer.shadowOpacity = 0.3
                    
                    // –¢–ï–ü–ï–†–¨ –∞–Ω–∏–º–∏—Ä—É–µ–º —É–º–µ–Ω—å—à–µ–Ω–∏–µ –æ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                    UIView.animate(withDuration: 0.25, animations: {
                        fingerView.transform = CGAffineTransform(scaleX: 0.1, y: 0.1)
                        fingerView.alpha = 0
                    }) { _ in
                        fingerView.removeFromSuperview()
                    }
                } else {
                    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–∞–ª—å—Ü–µ–≤: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
                    UIView.animate(withDuration: 0.3, animations: {
                        fingerView.transform = CGAffineTransform(scaleX: 0.1, y: 0.1)
                        fingerView.alpha = 0
                    }) { _ in
                        fingerView.removeFromSuperview()
                    }
                }
                
                fingerViews.removeValue(forKey: touch)
            }
        }
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
            self.updateFingerCount()
        }
    }
    
    override func touchesCancelled(_ touches: Set<UITouch>, with event: UIEvent?) {
        for touch in touches {
            if let fingerView = fingerViews[touch] {
                stopPulseAnimation(for: fingerView)
                
                // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–∞–∫–∞—è –∂–µ –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∫–∞—Å–∞–Ω–∏–π
                let isSelectedFinger = fingerView.transform.a > 1.2
                
                if isSelectedFinger {
                    // üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –í–°–ï –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–Ω–∞—á–∞–ª–∞
                    fingerView.layer.removeAllAnimations()
                    
                    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫ –æ–±—ã—á–Ω–æ–º—É –≤–∏–¥—É –ë–ï–ó –∞–Ω–∏–º–∞—Ü–∏–∏
                    fingerView.transform = .identity
                    fingerView.backgroundColor = .white
                    fingerView.layer.borderWidth = 3
                    fingerView.layer.borderColor = UIColor.black.withAlphaComponent(0.2).cgColor
                    fingerView.layer.shadowOffset = CGSize(width: 0, height: 4)
                    fingerView.layer.shadowRadius = 8
                    fingerView.layer.shadowOpacity = 0.3
                    
                    // –¢–ï–ü–ï–†–¨ –∞–Ω–∏–º–∏—Ä—É–µ–º —É–º–µ–Ω—å—à–µ–Ω–∏–µ –æ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                    UIView.animate(withDuration: 0.25, animations: {
                        fingerView.transform = CGAffineTransform(scaleX: 0.1, y: 0.1)
                        fingerView.alpha = 0
                    }) { _ in
                        fingerView.removeFromSuperview()
                    }
                } else {
                    UIView.animate(withDuration: 0.3, animations: {
                        fingerView.transform = CGAffineTransform(scaleX: 0.1, y: 0.1)
                        fingerView.alpha = 0
                    }) { _ in
                        fingerView.removeFromSuperview()
                    }
                }
                
                fingerViews.removeValue(forKey: touch)
            }
        }
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
            self.updateFingerCount()
        }
    }
    
    // MARK: - üéØ –£–õ–£–ß–®–ï–ù–ù–û–ï –°–û–ó–î–ê–ù–ò–ï FINGER VIEW —Å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–º —Ü–≤–µ—Ç–æ–º
    private func createFingerView() -> UIView {
        let fingerView = UIView()
        
        let fingerColor: UIColor
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ñ–æ–Ω–∞
        switch currentQuestionType {
        case .truth:
            // –§–æ–Ω –∑–µ–ª–µ–Ω—ã–π -> –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–ª—ã–π –¥–ª—è –ø–∞–ª—å—Ü–µ–≤
            fingerColor = .white
        case .dare:
            // –§–æ–Ω —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π -> –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–ª—ã–π –¥–ª—è –ø–∞–ª—å—Ü–µ–≤
            fingerColor = .white
        }
        
        fingerView.backgroundColor = fingerColor
        fingerView.layer.cornerRadius = 50
        fingerView.frame = CGRect(x: 0, y: 0, width: 100, height: 100)
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
        fingerView.layer.shadowColor = UIColor.black.cgColor
        fingerView.layer.shadowOffset = CGSize(width: 0, height: 4)
        fingerView.layer.shadowRadius = 8
        fingerView.layer.shadowOpacity = 0.3
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É –¥–ª—è –µ—â–µ –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
        fingerView.layer.borderWidth = 3
        fingerView.layer.borderColor = UIColor.black.withAlphaComponent(0.2).cgColor
        
        return fingerView
    }
    
    // MARK: - üéØ –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ü–£–õ–¨–°–ê–¶–ò–ò
    private func startPulseAnimation(for fingerView: UIView) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        fingerView.layer.removeAllAnimations()
        
        let pulseAnimation = CABasicAnimation(keyPath: "transform.scale")
        pulseAnimation.duration = 0.5
        pulseAnimation.fromValue = 1.0
        pulseAnimation.toValue = 1.2
        pulseAnimation.timingFunction = CAMediaTimingFunction(name: .easeInEaseOut)
        pulseAnimation.autoreverses = true
        pulseAnimation.repeatCount = .infinity
        
        fingerView.layer.add(pulseAnimation, forKey: "pulseAnimation")
    }
    
    private func stopPulseAnimation(for fingerView: UIView) {
        fingerView.layer.removeAnimation(forKey: "pulseAnimation")
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ù–ï –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–ª–µ—Ü
        if fingerView.transform.a <= 1.2 {
            UIView.animate(withDuration: 0.2) {
                fingerView.transform = .identity
            }
        }
    }
    
    private func startPulseAnimationForAllFingers() {
        for fingerView in fingerViews.values {
            startPulseAnimation(for: fingerView)
        }
        
        // üéØ –î–û–ë–ê–í–õ–Ø–ï–ú –í–ò–ë–†–ê–¶–ò–Æ –ü–†–ò –ù–ê–ß–ê–õ–ï –ü–£–õ–¨–°–ê–¶–ò–ò
        let impactFeedback = UIImpactFeedbackGenerator(style: .medium)
        impactFeedback.impactOccurred()
    }
    
    private func stopPulseAnimationForAllFingers() {
        for fingerView in fingerViews.values {
            stopPulseAnimation(for: fingerView)
        }
    }
    
    // MARK: - üéØ –£–õ–£–ß–®–ï–ù–ù–´–ô COUNTDOWN —Å –ø—É–ª—å—Å–∞—Ü–∏–µ–π
    private func updateFingerCount() {
        print("Update finger count: \(fingerViews.count)")
        
        let deadTouches = fingerViews.filter { $0.value.superview == nil }
        for (touch, _) in deadTouches {
            fingerViews.removeValue(forKey: touch)
        }
        
        if fingerViews.count >= 2 {
            startCountdown()
        } else {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º countdown –∏ –ø—É–ª—å—Å–∞—Ü–∏—é
            countdownTimer?.invalidate()
            countdownTimer = nil
            isCountdownActive = false
            stopPulseAnimationForAllFingers()
            
            // üéØ –ù–û–í–û–ï: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–∞–ª—å—Ü—ã –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –≤–∏–¥—É
            resetAllFingersToNormalState()
        }
    }
    
    // üéØ –ù–û–í–´–ô –ú–ï–¢–û–î: –°–±—Ä–æ—Å –≤—Å–µ—Ö –ø–∞–ª—å—Ü–µ–≤ –∫ –æ–±—ã—á–Ω–æ–º—É –≤–∏–¥—É
    private func resetAllFingersToNormalState() {
        for fingerView in fingerViews.values {
            // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –ü–ï–†–ï–î –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
            fingerView.layer.removeAllAnimations()
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –ª–∏ —É–∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            if fingerView.transform.a != 1.0 || fingerView.backgroundColor != UIColor.white {
                // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–≤–µ—Ç –ë–ï–ó –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≤—Å–ø–ª–µ—Å–∫–æ–≤
                fingerView.backgroundColor = .white
                fingerView.layer.borderWidth = 3
                fingerView.layer.borderColor = UIColor.black.withAlphaComponent(0.2).cgColor
                fingerView.layer.shadowOffset = CGSize(width: 0, height: 4)
                fingerView.layer.shadowRadius = 8
                fingerView.layer.shadowOpacity = 0.3
                
                // –¢–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä –∞–Ω–∏–º–∏—Ä—É–µ–º –ø–ª–∞–≤–Ω–æ
                UIView.animate(withDuration: 0.2) {
                    fingerView.transform = .identity
                }
            }
        }
    }
    
    private func startCountdown() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        countdownTimer?.invalidate()
        countdownTimer = nil
        
        remainingTime = 3
        isCountdownActive = true
        print("Starting countdown with \(fingerViews.count) fingers")
        
        // üéØ –ù–ê–ß–ò–ù–ê–ï–ú –ü–£–õ–¨–°–ê–¶–ò–Æ –í–°–ï–• –ü–ê–õ–¨–¶–ï–í (—Å –≤–∏–±—Ä–∞—Ü–∏–µ–π)
        startPulseAnimationForAllFingers()
        
        countdownTimer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { [weak self] timer in
            guard let self = self else {
                timer.invalidate()
                return
            }
            
            self.remainingTime -= 1
            print("Countdown: \(self.remainingTime), fingers: \(self.fingerViews.count)")
            
            // üéØ –î–û–ë–ê–í–õ–Ø–ï–ú –õ–ï–ì–ö–£–Æ –í–ò–ë–†–ê–¶–ò–Æ –ù–ê –ö–ê–ñ–î–´–ô –¢–ò–ö –¢–ê–ô–ú–ï–†–ê
            let selectionFeedback = UISelectionFeedbackGenerator()
            selectionFeedback.selectionChanged()
            
            if self.remainingTime <= 0 {
                timer.invalidate()
                self.countdownTimer = nil
                self.isCountdownActive = false
                self.selectRandomFinger()
            }
        }
    }
    
    private func selectRandomFinger() {
        print("Selecting random finger from \(fingerViews.count) fingers")
        
        guard fingerViews.count >= 2 else {
            stopPulseAnimationForAllFingers()
            return
        }
        
        let allFingers = Array(fingerViews.values)
        let selectedFinger = allFingers.randomElement()
        
        animateSelection(selectedFinger: selectedFinger)
    }
    
    // MARK: - üéØ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ê–ù–ò–ú–ê–¶–ò–Ø –°–ï–õ–ï–ö–¶–ò–ò —Å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
    private func animateSelection(selectedFinger: UIView?) {
        // –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—É–ª—å—Å–∞—Ü–∏–∏
        stopPulseAnimationForAllFingers()
        
        // üéØ –ú–û–©–ù–ê–Ø –í–ò–ë–†–ê–¶–ò–Ø –ü–†–ò –í–´–ë–û–†–ï –ü–û–ë–ï–î–ò–¢–ï–õ–Ø
        let impactFeedback = UIImpactFeedbackGenerator(style: .heavy)
        impactFeedback.impactOccurred()
        
        UIView.animate(withDuration: 0.5, animations: {
            for fingerView in self.fingerViews.values {
                if fingerView == selectedFinger {
                    // üéØ –í–´–ë–†–ê–ù–ù–´–ô –ü–ê–õ–ï–¶ - —è—Ä–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º
                    fingerView.transform = CGAffineTransform(scaleX: 1.5, y: 1.5)
                    
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —è—Ä–∫–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞ –≤–º–µ—Å—Ç–æ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
                    let selectedColor: UIColor
                    switch self.currentQuestionType {
                    case .truth:
                        selectedColor = UIColor.systemYellow // –Ø—Ä–∫–∏–π –∂–µ–ª—Ç—ã–π –Ω–∞ –∑–µ–ª–µ–Ω–æ–º —Ñ–æ–Ω–µ
                    case .dare:
                        selectedColor = UIColor.systemOrange // –Ø—Ä–∫–∏–π –æ—Ä–∞–Ω–∂–µ–≤—ã–π –Ω–∞ —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–º —Ñ–æ–Ω–µ
                    }
                    
                    fingerView.backgroundColor = selectedColor
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≥—Ä–∞–Ω–∏—Ü—É –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
                    fingerView.layer.borderWidth = 5
                    fingerView.layer.borderColor = UIColor.white.cgColor
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ —è—Ä–∫—É—é —Ç–µ–Ω—å
                    fingerView.layer.shadowColor = UIColor.black.cgColor
                    fingerView.layer.shadowOffset = CGSize(width: 0, height: 6)
                    fingerView.layer.shadowRadius = 12
                    fingerView.layer.shadowOpacity = 0.5
                    
                } else {
                    // –ù–µ–≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞–ª—å—Ü—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –º–µ–Ω—å—à–µ –∏ —Ç—É—Å–∫–ª–µ–µ
                    fingerView.transform = CGAffineTransform(scaleX: 0.7, y: 0.7)
                    fingerView.backgroundColor = UIColor.gray.withAlphaComponent(0.6)
                    fingerView.layer.borderColor = UIColor.gray.cgColor
                    fingerView.layer.borderWidth = 2
                }
            }
        }) { _ in
            // –ü–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø—É–ª—å—Å–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–∞–ª—å—Ü—É
            if let selected = selectedFinger {
                self.addWinnerPulseAnimation(to: selected)
            }
        }
    }
    
    // MARK: - üéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –ê–ù–ò–ú–ê–¶–ò–Ø –î–õ–Ø –ü–û–ë–ï–î–ò–¢–ï–õ–Ø
    private func addWinnerPulseAnimation(to fingerView: UIView) {
        // üéØ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –í–ò–ë–†–ê–¶–ò–Ø –î–õ–Ø –ü–û–ë–ï–î–ò–¢–ï–õ–Ø
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
            let notificationFeedback = UINotificationFeedbackGenerator()
            notificationFeedback.notificationOccurred(.success)
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        let pulseAnimation = CABasicAnimation(keyPath: "transform.scale")
        pulseAnimation.duration = 0.8
        pulseAnimation.fromValue = 1.5  // –ù–∞—á–∏–Ω–∞–µ–º —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        pulseAnimation.toValue = 1.7    // –ü—É–ª—å—Å–∏—Ä—É–µ–º –µ—â–µ –±–æ–ª—å—à–µ
        pulseAnimation.timingFunction = CAMediaTimingFunction(name: .easeInEaseOut)
        pulseAnimation.autoreverses = true
        pulseAnimation.repeatCount = 3  // –ü—É–ª—å—Å–∏—Ä—É–µ—Ç 3 —Ä–∞–∑–∞
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —Å–≤–µ—á–µ–Ω–∏—è
        let glowAnimation = CABasicAnimation(keyPath: "shadowOpacity")
        glowAnimation.duration = 0.8
        glowAnimation.fromValue = 0.5
        glowAnimation.toValue = 0.8
        glowAnimation.autoreverses = true
        glowAnimation.repeatCount = 3
        
        fingerView.layer.add(pulseAnimation, forKey: "winnerPulse")
        fingerView.layer.add(glowAnimation, forKey: "winnerGlow")
    }
}

// MARK: - üéØ –î–ï–õ–ï–ì–ê–¢ –°–ò–°–¢–ï–ú–´ –û–¶–ï–ù–ö–ò
extension GameViewController: RatingPopupDelegate {
    func didSubmitRating(_ rating: Int) {
        print("üåü User rated collection: \(rating) stars")
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        // API call to submit rating...
        
        // –ü–æ–ª—É—á–∞–µ–º completion –∏–∑ associated object
        if let completion = objc_getAssociatedObject(self, "completion") as? () -> Void {
            completion()
        }
    }
    
    func didSkipRating() {
        print("‚è≠Ô∏è User skipped rating")
        
        // –ü–æ–ª—É—á–∞–µ–º completion –∏–∑ associated object
        if let completion = objc_getAssociatedObject(self, "completion") as? () -> Void {
            completion()
        }
    }
    
    func didReturnToGame() {
        print("üéÆ User returned to game")
        // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∏–≥—Ä—É
    }
}

