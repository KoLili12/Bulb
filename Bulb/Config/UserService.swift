//
//  UserService.swift
//  Bulb
//
//  Service for handling user profile operations
//

import Foundation

class UserService {
    static let shared = UserService()
    
    private init() {}
    
    // MARK: - User Profile Methods
    
    func getCurrentUser(completion: @escaping (Result<User, NetworkError>) -> Void) {
        // –ü–æ—Å–∫–æ–ª—å–∫—É –≤ –±—ç–∫–µ–Ω–¥–µ –Ω–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /me, –ø–æ–ª—É—á–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ç–æ–∫–µ–Ω–∞
        // –ò–ª–∏ —Å–æ–∑–¥–∞–¥–∏–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        NetworkManager.shared.request(
            endpoint: "/user/me", // –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±—ç–∫–µ–Ω–¥
            method: .GET,
            responseType: User.self,
            requiresAuth: true
        ) { result in
            completion(result)
        }
    }
    
    func updateProfile(name: String, surname: String, email: String, phone: String?, description: String?, completion: @escaping (Result<User, NetworkError>) -> Void) {
        let request = UserUpdateRequest(
            name: name,
            surname: surname,
            email: email,
            phone: phone,
            description: description
        )
        
        NetworkManager.shared.request(
            endpoint: "/user/profile", // –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ç–æ–∂–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
            method: .PUT,
            body: request,
            responseType: User.self,
            requiresAuth: true
        ) { result in
            completion(result)
        }
    }
    
    // MARK: - Collections –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    func getUserCollections(completion: @escaping (Result<[Collection], NetworkError>) -> Void) {
        CollectionsService.shared.getUserCollections(completion: completion)
    }
}

// MARK: - –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –±–µ–∑ –Ω–æ–≤—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
extension UserService {
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞ JWT (–≤—Ä–µ–º–µ–Ω–Ω–æ)
    func getCurrentUserFromToken() -> User? {
        guard let token = AuthManager.shared.accessToken else { return nil }
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–∞—Ä—Å–∏–Ω–≥ JWT —Ç–æ–∫–µ–Ω–∞
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        return User(
            id: 1,
            name: "–¢–µ–∫—É—â–∏–π",
            surname: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            email: "user@example.com",
            phone: "+7 (999) 123-45-67",
            imageUrl: nil,
            description: "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            createdAt: Date()
        )
    }
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ UserDefaults)
    func updateProfileLocally(name: String, surname: String, email: String, phone: String?, description: String?) {
        print("üíæ Saving user data locally:")
        print("Name: \(name)")
        print("Surname: \(surname)")
        print("Email: \(email)")
        print("Phone: \(phone ?? "nil")")
        print("Description: \(description ?? "nil")")
        
        UserDefaults.standard.set(name, forKey: "user_name")
        UserDefaults.standard.set(surname, forKey: "user_surname")
        UserDefaults.standard.set(email, forKey: "user_email")
        UserDefaults.standard.set(phone, forKey: "user_phone")
        UserDefaults.standard.set(description, forKey: "user_description")
        UserDefaults.standard.synchronize() // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    }
    
    func getCurrentUserFromStorage() -> User? {
        guard AuthManager.shared.isLoggedIn else {
            print("‚ùå User not logged in")
            return nil
        }
        
        let name = UserDefaults.standard.string(forKey: "user_name")
        let surname = UserDefaults.standard.string(forKey: "user_surname")
        let email = UserDefaults.standard.string(forKey: "user_email")
        let phone = UserDefaults.standard.string(forKey: "user_phone")
        let description = UserDefaults.standard.string(forKey: "user_description")
        
        print("üìñ Loading user data from storage:")
        print("Name: \(name ?? "nil")")
        print("Surname: \(surname ?? "nil")")
        print("Email: \(email ?? "nil")")
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
        guard let userName = name, let userSurname = surname, let userEmail = email else {
            print("‚ö†Ô∏è No saved user data found, returning default user")
            return User(
                id: 1,
                name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                surname: "",
                email: "user@example.com",
                phone: nil,
                imageUrl: nil,
                description: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                createdAt: Date()
            )
        }
        
        return User(
            id: 1,
            name: userName,
            surname: userSurname,
            email: userEmail,
            phone: phone?.isEmpty == true ? nil : phone,
            imageUrl: nil,
            description: description?.isEmpty == true ? nil : description,
            createdAt: Date()
        )
    }
}
